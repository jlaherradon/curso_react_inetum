{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport getStyleSheet from \"./styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      darkTheme: false\n    };\n    _this.toggleTheme = _this.toggleTheme.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"toggleTheme\",\n    value: function toggleTheme() {\n      this.setState({\n        darkTheme: !this.state.darkTheme\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var styles = getStyleSheet(this.state.darkTheme);\n      var backgroundColor = StyleSheet.flatten(styles.container).backgroundColor;\n      return _jsx(View, {\n        style: styles.container,\n        children: _jsx(View, {\n          style: styles.box,\n          children: _jsx(Button, {\n            title: backgroundColor,\n            onPress: this.toggleTheme\n          })\n        })\n      });\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };","map":{"version":3,"sources":["C:/Users/67259713/miProyecto/Listing-4.5-and-4.6-Themes/App.js"],"names":["React","Component","getStyleSheet","App","props","state","darkTheme","toggleTheme","bind","setState","styles","backgroundColor","StyleSheet","flatten","container","box"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAEA,OAAOC,aAAP;;;IAEqBC,G;;;;;AAEnB,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE;AADF,KAAb;AAGA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,+BAAnB;AALe;AAMlB;;;;WAED,uBAAc;AACV,WAAKC,QAAL,CAAc;AAACH,QAAAA,SAAS,EAAE,CAAC,KAAKD,KAAL,CAAWC;AAAxB,OAAd;AACH;;;WAED,kBAAS;AAEP,UAAMI,MAAM,GAAGR,aAAa,CAAC,KAAKG,KAAL,CAAWC,SAAZ,CAA5B;AACA,UAAMK,eAAe,GAAGC,UAAU,CAACC,OAAX,CAAmBH,MAAM,CAACI,SAA1B,EAAqCH,eAA7D;AAEA,aACI,KAAC,IAAD;AAAM,QAAA,KAAK,EAAED,MAAM,CAACI,SAApB;AAAA,kBACI,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEJ,MAAM,CAACK,GAApB;AAAA,oBACI,KAAC,MAAD;AAAQ,YAAA,KAAK,EAAEJ,eAAf;AAAgC,YAAA,OAAO,EAAE,KAAKJ;AAA9C;AADJ;AADJ,QADJ;AAOD;;;;EA1B8BN,S;;SAAZE,G","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, StyleSheet, View } from 'react-native';\r\nimport getStyleSheet from './styles';\r\n\r\nexport default class App extends Component {\r\n\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          darkTheme: false\r\n      };\r\n      this.toggleTheme = this.toggleTheme.bind(this);\r\n  }\r\n\r\n  toggleTheme() {\r\n      this.setState({darkTheme: !this.state.darkTheme})\r\n  };\r\n\r\n  render() {\r\n\r\n    const styles = getStyleSheet(this.state.darkTheme);\r\n    const backgroundColor = StyleSheet.flatten(styles.container).backgroundColor;\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <View style={styles.box}>\r\n                <Button title={backgroundColor} onPress={this.toggleTheme}/>\r\n            </View>\r\n        </View>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}